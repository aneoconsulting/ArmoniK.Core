name: Release

on:
  push:
    branches:
      - release
    tags-ignore: [ '**' ]

jobs:
  versionning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
      release: ${{ steps.genver.outputs.release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=${{ github.ref_name }}-pre --dev-branch=${{ github.ref_name }})
        echo "::set-output name=version::$VERSION"
        echo "VERSION : $VERSION"
        RELEASE=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=${{ github.ref_name }} --dev-branch=main)
        echo "::set-output name=release::$RELEASE"
        echo "RELEASE : $RELEASE"

  tagImagesRelease:
    runs-on: ubuntu-latest
    needs:
      - versionning
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
      RELEASE: ${{ needs.versionning.outputs.release }}
    strategy:
      fail-fast: true
      matrix:
        image:
        - dockerhubaneo/armonik_pollingagent
        - dockerhubaneo/armonik_control_metrics
        - dockerhubaneo/armonik_control_partition_metrics
        - dockerhubaneo/armonik_control
        - dockerhubaneo/armonik_core_stream_test_worker
        - dockerhubaneo/armonik_core_stream_test_client
        - dockerhubaneo/armonik_core_htcmock_test_worker
        - dockerhubaneo/armonik_core_htcmock_test_client
        - dockerhubaneo/armonik_core_bench_test_worker
        - dockerhubaneo/armonik_core_bench_test_client
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: login
      run: echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_LOGIN }} --password-stdin

    - name: ReTag
      run: |
        set -xe
        docker manifest inspect ${{ matrix.image }}:${VERSION} | jq --raw-output ".manifests[].digest" | sed -e 's:^:${{ matrix.image }}@:g' | xargs docker manifest create ${{ matrix.image }}:${RELEASE} -a 
        docker manifest inspect ${{ matrix.image }}:${VERSION} | jq --raw-output ".manifests[].digest" | sed -e 's:^:${{ matrix.image }}@:g' | xargs docker manifest create ${{ matrix.image }}:latest -a 
        docker manifest push ${{ matrix.image }}:${RELEASE}
        docker manifest push ${{ matrix.image }}:latest

  tag:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/release' }}
    needs:
      - versionning
      - tagImagesRelease
    env:
      RELEASE: ${{ needs.versionning.outputs.release }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}

    - name: tag
      run: |
        git tag $RELEASE
        git push origin $RELEASE
