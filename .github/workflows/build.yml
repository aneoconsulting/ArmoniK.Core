name: DeployTest

on:
  workflow_dispatch:
  push:
    paths:
      - 'Adaptors/**'
      - 'Common/**'
      - 'Compute/**'
      - 'Control/**'
      - '.github/workflows/**'
    branches:
      - '**'
  

jobs:
  sonarCloud:
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          submodules: true

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: .\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"aneoconsulting_ArmoniK.Core" /o:"aneoconsulting" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build ArmoniK.Core.sln
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  versionning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=release --dev-branch=master) 
        echo "::set-output name=version::$VERSION"
        echo $VERSION

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        projects:
          - Common/tests
          - Adaptors/MongoDB/tests
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        submodules: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x

    - name: Run tests
      run: |
        cd ${{ matrix.projects }}
        dotnet test --logger "trx;LogFileName=test-results.trx"

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test - ${{ matrix.projects }}
        path: ${{ matrix.projects }}/TestResults/test-results.trx
        reporter: dotnet-trx

  buildProjects:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        submodules: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x

    - name: Build the package
      run: |
        dotnet build Adaptors/Amqp/src/ArmoniK.Core.Adapters.Amqp.csproj -c Release
        dotnet build Adaptors/MongoDB/src/ArmoniK.Core.Adapters.MongoDB.csproj -c Release
        dotnet build Adaptors/MongoDB/tests/ArmoniK.Core.Adapters.MongoDB.Tests.csproj -c Release
        dotnet build Common/src/ArmoniK.Core.Common.csproj -c Release
        dotnet build Common/tests/ArmoniK.Core.Common.Tests.csproj -c Release
        dotnet build Compute/PollingAgent/src/ArmoniK.Core.Compute.PollingAgent.csproj -c Release
        dotnet build Control/Submitter/src/ArmoniK.Core.Control.Submitter.csproj -c Release

  buildControl:
    runs-on: ubuntu-latest
    needs:
      - versionning
      - buildProjects
      - tests
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        submodules: true

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u dhaneo1 --password-stdin

    - name: build
      run: |
        echo $VERSION
        docker build -t dockerhubaneo/armonik_control:$VERSION -f Control/Submitter/src/Dockerfile .

    - name: push
      run: |
        docker push dockerhubaneo/armonik_control:$VERSION

  buildAgent:
    runs-on: ubuntu-latest
    needs:
      - versionning
      - buildProjects
      - tests
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}
        submodules: true

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u dhaneo1 --password-stdin

    - name: Build
      run: |
        echo $VERSION
        docker build -t dockerhubaneo/armonik_pollingagent:$VERSION -f ./Compute/PollingAgent/src/Dockerfile .

    - name: push
      run: |
        docker push dockerhubaneo/armonik_pollingagent:$VERSION

  testInfraWorker:
    needs:
      - versionning
      - buildAgent
      - buildControl
    runs-on: ubuntu-latest
    steps:
      - uses: aneoconsulting/ArmoniK/.github/actions/test-worker@main
        with:
          version: main
          control-plane-image: dockerhubaneo/armonik_control
          control-plane-tag: ${{ needs.versionning.outputs.version }}
          polling-agent-image: dockerhubaneo/armonik_pollingagent
          polling-agent-tag: ${{ needs.versionning.outputs.version }}

  testInfraMockV3:
    needs:
      - versionning
      - buildAgent
      - buildControl
    runs-on: ubuntu-latest
    steps:
      - uses: aneoconsulting/ArmoniK/.github/actions/test-mock-v3@main
        with:
          version: main
          control-plane-image: dockerhubaneo/armonik_control
          control-plane-tag: ${{ needs.versionning.outputs.version }}
          polling-agent-image: dockerhubaneo/armonik_pollingagent
          polling-agent-tag: ${{ needs.versionning.outputs.version }}

  tag:
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/release' }}
    needs:
      - versionning
      - testInfraWorker
      - testInfraMockV3
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.head_ref }}

    - name: tag
      run: |
        git tag $VERSION
        git push origin $VERSION
