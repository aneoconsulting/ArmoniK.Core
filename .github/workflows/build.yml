name: Build and Test

on:
  push:
    branches-ignore:
      - release
    paths-ignore:
      - .github/workflows/manual-integration-test.yml
    tags-ignore: [ '**' ]

jobs:

  versionning:
    name: Versionning
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        if [[ "${{ github.ref_name }}" == "releases/"* ]]
        then
          VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=release --dev-branch=${{ github.ref_name }})
        else
          VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=release --dev-branch=main)
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version :" >> $GITHUB_STEP_SUMMARY
        echo "$VERSION" >> $GITHUB_STEP_SUMMARY
        echo $VERSION

  buildProjects:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.x

    # - name: Build the solution
    #   run: dotnet build ArmoniK.Core.sln -c Release


  # buildImages:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - versionning
  #     - buildProjects
  #   env:
  #     VERSION: ${{ needs.versionning.outputs.version }}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       include:
  #       -  img : dockerhubaneo/armonik_pollingagent
  #          path: ./Compute/PollingAgent/src/Dockerfile
  #       -  img : dockerhubaneo/armonik_core_htcmock_test_worker
  #          path: ./Tests/HtcMock/Server/src/Dockerfile
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #     with:
  #       ref: ${{ github.ref }}
  #       submodules: true

  #   - name: login
  #     run: echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_LOGIN }} --password-stdin

  #   - name: Build
  #     run: docker build -t ${{ matrix.img }}:$VERSION -f ${{ matrix.path }} .

  #   - name: push
  #     run: docker push ${{ matrix.img }}:$VERSION

  # buildImagesCross:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - versionning
  #     - buildImages
  #   env:
  #     VERSION: ${{ needs.versionning.outputs.version }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #       -  img : dockerhubaneo/armonik_pollingagent
  #          path: ./Compute/PollingAgent/src/Dockerfile
  #       -  img : dockerhubaneo/armonik_core_htcmock_test_worker
  #          path: ./Tests/HtcMock/Server/src/Dockerfile
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #     with:
  #       ref: ${{ github.ref }}
  #       submodules: true

  #   - name: Set up QEMU
  #     uses: docker/setup-qemu-action@v2

  #   - name: Set up Docker Buildx
  #     id: buildx
  #     uses: docker/setup-buildx-action@v2

  #   - name: login
  #     uses: docker/login-action@v2
  #     with:
  #       username: ${{ secrets.DOCKER_HUB_LOGIN }}
  #       password: ${{ secrets.DOCKER_HUB_TOKEN }}

  #   - name: platforms
  #     run: echo ${{ steps.buildx.outputs.platforms }}

  #   - name: Build and push
  #     uses: docker/build-push-action@v3
  #     with:
  #       file: ${{ matrix.path }}
  #       context: .
  #       platforms: linux/arm64
  #       push: true
  #       tags: |
  #           ${{ matrix.img }}:${{ needs.versionning.outputs.version }}-arm

  #   - name: Create multi-arch manifest
  #     run: docker buildx imagetools create ${{ matrix.img }}:${VERSION} --tag ${{ matrix.img }}:${VERSION} --append ${{ matrix.img }}:${VERSION}-arm

  buildImagesCrossWindows:
    runs-on: windows-2019
    needs:
      - versionning
      # - buildImages
      # - buildImagesCross
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    strategy:
      fail-fast: false
      matrix:
        include:
        -  img : dockerhubaneo/armonik_pollingagent
           path: ./Compute/PollingAgent/src/DockerfileWindows
        -  img : dockerhubaneo/armonik_core_htcmock_test_worker
           path: ./Tests/HtcMock/Server/src/DockerfileWindows
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

    - name: login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_LOGIN }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push
      run: |
        docker build --platform windows/amd64 -t ${{ matrix.img }}:${{ needs.versionning.outputs.version }}-windows -f ${{ matrix.path }} .
        docker push ${{ matrix.img }}:${{ needs.versionning.outputs.version }}-windows

  # MultiArchive:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - versionning
  #     - buildImages
  #     # - buildImagesCross
  #     - buildImagesCrossWindows
  #   env:
  #     VERSION: ${{ needs.versionning.outputs.version }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #       -  img : dockerhubaneo/armonik_pollingagent
  #          path: ./Compute/PollingAgent/src/DockerfileWindows
  #       -  img : dockerhubaneo/armonik_core_htcmock_test_worker
  #          path: ./Tests/HtcMock/Server/src/DockerfileWindows
  #   steps:
  #   - name: Set up Docker Buildx
  #     id: buildx
  #     uses: docker/setup-buildx-action@v2

  #   - name: login
  #     uses: docker/login-action@v2
  #     with:
  #       username: ${{ secrets.DOCKER_HUB_LOGIN }}
  #       password: ${{ secrets.DOCKER_HUB_TOKEN }}

  #   - name: Create multi-arch manifest
  #     run: docker buildx imagetools create ${{ matrix.img }}:${VERSION} --tag ${{ matrix.img }}:${VERSION} --append ${{ matrix.img }}:${VERSION}-arm --append ${{ matrix.img }}:${VERSION}-windows
