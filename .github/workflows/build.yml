name: Build and Test

on:
  push:
    branches-ignore:
      - release
    paths-ignore:
      - .github/workflows/make-release.yml
      - .github/workflows/manual-integration-test.yml
    tags-ignore: [ '**' ]

jobs:
  sonarCloud:
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
          submodules: true

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: .\.sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"aneoconsulting_ArmoniK.Core" /o:"aneoconsulting" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build ArmoniK.Core.sln
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  versionning:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.genver.outputs.version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        fetch-depth: 0

    - name: Generate Version
      id: genver
      run: |
        VERSION=$(docker run --rm -v $(pwd):/repo codacy/git-version /bin/git-version --folder=/repo --release-branch=release --dev-branch=master) 
        echo "::set-output name=version::$VERSION"
        echo $VERSION

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        projects:
          - Common/tests
          - Adaptors/MongoDB/tests
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x

    - name: Run tests
      run: |
        cd ${{ matrix.projects }}
        dotnet test --logger "trx;LogFileName=test-results.trx"

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Test - ${{ matrix.projects }}
        path: ${{ matrix.projects }}/TestResults/test-results.trx
        reporter: dotnet-trx

  buildProjects:
    runs-on: ubuntu-latest
    # find . -name "*.csproj" | xargs -I % echo - %
    strategy:
      fail-fast: false
      matrix:
        project:
          - ./Adaptors/Amqp/src/ArmoniK.Core.Adapters.Amqp.csproj
          - ./Adaptors/Memory/src/ArmoniK.Core.Adapters.Memory.csproj
          - ./Adaptors/Memory/tests/ArmoniK.Core.Adapters.Memory.Tests.csproj
          - ./Adaptors/MongoDB/src/ArmoniK.Core.Adapters.MongoDB.csproj
          - ./Adaptors/MongoDB/tests/ArmoniK.Core.Adapters.MongoDB.Tests.csproj
          - ./Adaptors/Redis/src/ArmoniK.Core.Adapters.Redis.csproj
          - ./Common/src/ArmoniK.Core.Common.csproj
          - ./Common/tests/ArmoniK.Core.Common.Tests.csproj
          - ./Compute/PollingAgent/src/ArmoniK.Core.Compute.PollingAgent.csproj
          - ./Control/Metrics/src/ArmoniK.Core.Control.Metrics.csproj
          - ./Control/Submitter/src/ArmoniK.Core.Control.Submitter.csproj
          - ./Control/Submitter/tests/ArmoniK.Core.Control.Submitter.Tests.csproj
          - ./Tests/HtcMock/Client/src/ArmoniK.Samples.HtcMock.Client.csproj
          - ./Tests/HtcMock/Server/src/ArmoniK.Samples.HtcMock.Server.csproj
          - ./Tests/Stream/Client/ArmoniK.Extensions.Common.StreamWrapper.Tests.Client.csproj
          - ./Tests/Stream/Common/ArmoniK.Extensions.Common.StreamWrapper.Tests.Common.csproj
          - ./Tests/Stream/Server/ArmoniK.Extensions.Common.StreamWrapper.Tests.Server.csproj
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.x

    - name: Build the projects
      run: |
        dotnet build ${{ matrix.project }} -c Release


  buildImages:
    runs-on: ubuntu-latest
    needs:
      - versionning
      - buildProjects
      - tests
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    strategy:
      fail-fast: true
      matrix:
        include:
        -  img : dockerhubaneo/armonik_pollingagent
           path: ./Compute/PollingAgent/src/Dockerfile
        -  img : dockerhubaneo/armonik_control_metrics
           path: ./Control/Metrics/src/Dockerfile
        -  img : dockerhubaneo/armonik_control
           path: ./Control/Submitter/src/Dockerfile
        -  img : dockerhubaneo/armonik_core_stream_test_worker
           path: ./Tests/Stream/Server/Dockerfile
        -  img : dockerhubaneo/armonik_core_stream_test_client
           path: ./Tests/Stream/Client/Dockerfile
        -  img : dockerhubaneo/armonik_core_htcmock_test_worker
           path: ./Tests/HtcMock/Server/src/Dockerfile
        -  img : dockerhubaneo/armonik_core_htcmock_test_client
           path: ./Tests/HtcMock/Client/src/Dockerfile
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.ref }}
        submodules: true

    - name: login
      run: |
        echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u dhaneo1 --password-stdin

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: platforms
      run: echo ${{ steps.buildx.outputs.platforms }}

    - name: Build
      run: |
        echo $VERSION
        docker buildx create --use
        docker buildx build \
          --platform linux/amd64,linux/arm64 \
          -t ${{ matrix.img }}:$VERSION \
          -f ${{ matrix.path }} . \
          --push

  testStreamDC:
    needs:
      - versionning
      - buildImages
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        queue:
          - activemqp
          - artemis
          - rabbitmq
        log-level:
          - Information
          - Verbose
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          submodules: true
      - name: Docker compose up
        run: |
          export ARMONIK_WORKER=dockerhubaneo/armonik_core_stream_test_worker:$VERSION
          export ARMONIK_METRICS=dockerhubaneo/armonik_control_metrics:$VERSION
          export ARMONIK_SUBMITTER=dockerhubaneo/armonik_control:$VERSION
          export ARMONIK_POLLINGAGENT=dockerhubaneo/armonik_pollingagent:$VERSION
          export LOGGING_LEVEL=${{ matrix.log-level }}
          docker-compose -f docker-compose/docker-compose.yml -f docker-compose/docker-compose.queue-${{ matrix.queue }}.yml up -d --build --force-recreate --remove-orphans
          sleep 10
          ls -la docker-compose/logs/*.json

      - name: Run Stream Test
        timeout-minutes: 10
        run: |
          cd ./Tests/Stream/Client/
          dotnet test --logger "trx;LogFileName=test-results.trx"

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test - ${{ matrix.queue }} x ${{ matrix.log-level }}
          path: ./Tests/Stream/Client/TestResults/test-results.trx
          reporter: dotnet-trx

      - name: Store logs
        uses: actions/upload-artifact@v2.3.1
        if: always()
        with:
          name: ${{ github.run_number }} ${{ github.run_attempt }} -- Logs -- ${{ github.job }} ${{ matrix.queue }} ${{ matrix.log-level }}
          path: docker-compose/logs/*.json
          retention-days: 2

  testHtcMockDC:
    needs:
      - versionning
      - buildImages
    env:
      VERSION: ${{ needs.versionning.outputs.version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        queue:
          - activemqp
          - artemis
          - rabbitmq
        log-level:
          - Information
          - Verbose
        ntasks:
          - 100
          - 1000
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
          submodules: true
      - name: Docker compose up
        run: |
          export ARMONIK_WORKER=dockerhubaneo/armonik_core_htcmock_test_worker:$VERSION
          export ARMONIK_METRICS=dockerhubaneo/armonik_control_metrics:$VERSION
          export ARMONIK_SUBMITTER=dockerhubaneo/armonik_control:$VERSION
          export ARMONIK_POLLINGAGENT=dockerhubaneo/armonik_pollingagent:$VERSION
          export LOGGING_LEVEL=${{ matrix.log-level }}
          docker-compose -f docker-compose/docker-compose.yml -f docker-compose/docker-compose.queue-${{ matrix.queue }}.yml up -d --build --force-recreate --remove-orphans
          sleep 10
          ls -la docker-compose/logs/*.json

      - name: Run HtcMock test
        timeout-minutes: 10
        run: |
          docker run --net armonik-net --rm \
            -e HtcMock__NTasks=${{ matrix.ntasks }} \
            -e HtcMock__TotalCalculationTime=00:00:00.100 \
            -e HtcMock__DataSize=1 \
            -e HtcMock__MemorySize=1 \
            -e HtcMock__SubTasksLevels=4 \
            -e Grpc__Endpoint=http://armonik.control.submitter:80 \
            dockerhubaneo/armonik_core_htcmock_test_client:$VERSION
          ls -la docker-compose/logs/*.json

      - name: Store logs
        uses: actions/upload-artifact@v2.3.1
        if: always()
        with:
          name: ${{ github.run_number }} ${{ github.run_attempt }} -- Logs -- ${{ github.job }} ${{ matrix.queue }} ${{ matrix.log-level }} ${{ matrix.ntasks }}
          path: docker-compose/logs/*.json
          retention-days: 2